install.packages("swirl")
install_from_swirl("R Programming")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
c?
c
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args()
args(list.files())
args(list.files
)
old.dir <- args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create(getwd(), testdir)
dir.create
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
getwd()
list.files()
files.exist("mytest.R")
file.exist("mytest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path(folder1, folder2)
file.path("folder1", "folder2")
recursive <- TRUE
?dir.create
dir.create("testdir2", "testdir3")
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
set(wd)
setwd()
setwd(dir)
setwd(old.dir)
1:20
pi:20
pi:10
15:1
`:`
?`:`
seq(1:20)
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length+30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
swirl()
bye()
swirl()
swirl()
swirl()
swirl()
swirl()
install_from_swirl("R Programming")
library(swirl)
swirl()
num_vect <- 0.5, 55, -10, 6
num_vect <- 0.5 55 -10 6
num_vect <- [0.5,55, -10, 6]
num_vect <-
3
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
print(tf)
tf
num_vect >=6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_char + " Jimmy"
c(my_char, 'Jimmy')
c(my_char, "Jimmy")
my_name <- c(my_char, "Jimmy")
my_name
paste(my_name, " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
sep = " "
paste(1:3, c("X", "Y", "Z"), sep = "")
Letters <- A:Z
paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf - inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(x[3], x[5], x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- 1:20
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix, my_matrix2)
patients <- c(Bill, Gina, Kelly, Sean)
patients <- c(`Bill`, `Gina`, `Kelly`, `Sean`)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
swirl()
swirl()
help.swirl
swirl()
swirl()
swirl()
swirl()
start()
help.swirl()
install_from_swirl("R Programming")
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6< 7
10<=10
5 =! 7
5 != 7
5 != 7
5 !== 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !false)
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
submit()
submit()
boring_function('My First Function!')
boring_function('My first function!')
boring
boring_function
submit()
my_mean(c(4, 5, 10))
# Write your code here!
# Remember: the last expression evaluated will be returned!
num %% divisor
submit()
submit()
remainder(5)
reaminder(11, 5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
submit()
evaluate(deviance, c(1.4, 3.6, 7.9, 8.8)
)
evaluate(standard deviance, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(c(8, 4, 0))
evaluate(function, c(8, 4, 0))
evaluate(function(x), c(8, 4, 0))
evaluate(first, c(8, 4, 0))
evaluate(index, c(8, 4, 0))
function)(x){}
evaluate(function(x){index()}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length]})
evaluate(function(x){x[2]})
evaluate(function(x){x[2]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
telegram()''
telegram()
submit()
submit()
function(oops, poop, fart)
as
mad_libs(oops, pop, foo)
mad_libs("oops", "pop", "foo")
submit()
Hello %p% teacher
"hello" %p% "hi"
submit()
submit()
"i" %p% "love" %p% "r"
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- "1969-01-01"
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- asPOSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(t1)
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Systime, t1, units = 'days')
difftime(Sys.time, t1, units = 'days')
difftime(Sys.time(), t1, units = 'days')
